{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isLikePressed","likeCounter","isDislikePressed","dislikeCounter","onLikeButtonClick","decrementDislike","toggleDislike","decrementLike","incrementLike","toggleLike","setState","prevState","props","onDislikeButtonClick","incrementDislike","Fragment","name","isPressed","this","counter","clicked","Component","LikeButton","classes","cx","className","onClick","DislikeButton","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+LAIMA,E,2MAEJC,MAAQ,CACNC,eAAe,EACfC,YAAa,IAEbC,kBAAkB,EAClBC,eAAgB,I,EAGlBC,kBAAoB,WACf,EAAKF,qBACN,EAAKG,mBACL,EAAKC,iBAGJ,EAAKN,gBACN,EAAKO,gBAEL,EAAKC,gBAEP,EAAKC,c,EAGPT,cAAgB,WACd,OAAO,EAAKD,MAAMC,e,EAGpBO,cAAgB,WACd,EAAKG,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLX,YAAaU,EAAUV,YAAc,O,EAK3CO,cAAgB,WACd,EAAKE,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLX,YAAaU,EAAUV,YAAc,O,EAK3CQ,WAAa,WACX,EAAKC,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLZ,eAAgBW,EAAUX,mB,EAKhCa,qBAAuB,WAClB,EAAKb,kBACN,EAAKO,gBACL,EAAKE,cAGJ,EAAKP,mBACN,EAAKG,mBAEL,EAAKS,mBAEP,EAAKR,iB,EAGPJ,iBAAmB,WACjB,OAAO,EAAKH,MAAMG,kB,EAGpBG,iBAAmB,WACjB,EAAKK,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLT,eAAgBQ,EAAUR,eAAiB,O,EAKjDW,iBAAmB,WACjB,EAAKJ,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLT,eAAgBQ,EAAUR,eAAiB,O,EAKjDG,cAAgB,WACd,EAAKI,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLV,kBAAmBS,EAAUT,sB,wEAMjC,OACE,kBAAC,IAAMa,SAAP,KACI,6BACI,4CACA,kBAAC,EAAD,CACAC,KAAK,OACLC,UAAWC,KAAKnB,MAAMC,cACtBmB,QAASD,KAAKnB,MAAME,YACpBmB,QAASF,KAAKd,oBAEd,kBAAC,EAAD,CACAY,KAAK,UACLC,UAAWC,KAAKnB,MAAMG,iBACtBiB,QAASD,KAAKnB,MAAMI,eACpBiB,QAASF,KAAKL,wBAElB,kW,GA/GQQ,aAiIZC,EAAa,SAACV,GAClB,IAAIW,EAAUC,IAAG,CACf,eAAe,EACf,MAASZ,EAAMK,YAGjB,OACE,4BACAQ,UAAWF,EACXG,QAASd,EAAMQ,SACZR,EAAMI,KAHT,MAGiB,0BAAMS,UAAU,iBAAiBb,EAAMO,WAKtDQ,EAAgB,SAACf,GACrB,IAAIW,EAAUC,IAAG,CACf,kBAAkB,EAClB,SAAYZ,EAAMK,YAGpB,OACE,4BACAQ,UAAWF,EACXG,QAASd,EAAMQ,SACZR,EAAMI,KAHT,MAGiB,0BAAMS,UAAU,oBAAoBb,EAAMO,WAMhDrB,ICxJK8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3de05929.chunk.js","sourcesContent":["\nimport React, { Component } from 'react'\nimport cx from 'classnames';\n\nclass App extends Component {\n\n  state = {\n    isLikePressed: false,\n    likeCounter: 100,\n\n    isDislikePressed: false,\n    dislikeCounter: 25\n  };\n\n  onLikeButtonClick = () => {\n    if(this.isDislikePressed()) {\n      this.decrementDislike();\n      this.toggleDislike();\n    }\n\n    if(this.isLikePressed()) {\n      this.decrementLike();\n    } else {\n      this.incrementLike();\n    }\n    this.toggleLike();\n  }\n\n  isLikePressed = () => {\n    return this.state.isLikePressed;\n  }\n\n  decrementLike = () => {\n    this.setState((prevState, props) => {\n      return {\n        likeCounter: prevState.likeCounter - 1\n      }\n    });\n  }\n\n  incrementLike = () => {\n    this.setState((prevState, props) => {\n      return {\n        likeCounter: prevState.likeCounter + 1\n      }\n    });\n  }\n\n  toggleLike = () => {\n    this.setState((prevState, props) => {\n      return {\n        isLikePressed: !prevState.isLikePressed\n      }\n    });\n  }\n\n  onDislikeButtonClick = () => {\n    if(this.isLikePressed()) {\n      this.decrementLike();\n      this.toggleLike();\n    }\n\n    if(this.isDislikePressed()) {\n      this.decrementDislike();\n    } else {\n      this.incrementDislike();\n    }\n    this.toggleDislike();\n  }\n\n  isDislikePressed = () => {\n    return this.state.isDislikePressed;\n  }\n\n  decrementDislike = () => {\n    this.setState((prevState, props) => {\n      return {\n        dislikeCounter: prevState.dislikeCounter - 1\n      }\n    });\n  }\n\n  incrementDislike = () => {\n    this.setState((prevState, props) => {\n      return {\n        dislikeCounter: prevState.dislikeCounter + 1\n      }\n    });\n  }\n\n  toggleDislike = () => {\n    this.setState((prevState, props) => {\n      return {\n        isDislikePressed: !prevState.isDislikePressed\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n          <div>\n              <h2>Like/Dislike</h2>\n              <LikeButton \n              name=\"Like\" \n              isPressed={this.state.isLikePressed}\n              counter={this.state.likeCounter} \n              clicked={this.onLikeButtonClick}/>\n\n              <DislikeButton \n              name=\"Dislike\" \n              isPressed={this.state.isDislikePressed}\n              counter={this.state.dislikeCounter} \n              clicked={this.onDislikeButtonClick}/>\n          </div>\n          <style>{`\n              .like-button, .dislike-button {\n                  font-size: 1rem;\n                  padding: 5px 10px;\n                  color:   #585858;\n              }\n\n              .liked, .disliked {\n                  font-weight: bold;\n                  color: #1565c0;\n              }\n          `}\n          </style>\n      </React.Fragment>\n    )\n  }\n}\n\nconst LikeButton = (props) => {\n  let classes = cx({\n    'like-button': true,\n    'liked': props.isPressed,\n  });\n\n  return(\n    <button \n    className={classes}\n    onClick={props.clicked}>\n      {props.name} | <span className=\"likes-counter\">{props.counter}</span>\n    </button>\n  )\n}\n\nconst DislikeButton = (props) => {\n  let classes = cx({\n    'dislike-button': true,\n    'disliked': props.isPressed,\n  });\n\n  return(\n    <button \n    className={classes}\n    onClick={props.clicked}>\n      {props.name} | <span className=\"dislikes-counter\">{props.counter}</span>\n    </button>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}