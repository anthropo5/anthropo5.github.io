{"version":3,"sources":["utils/normalizePreparationTime.js","utils/renderTextField.js","utils/renderSelectField.js","components/DishForm/DishDetails/PizzaDetails.js","utils/constants/fieldNames.js","components/DishForm/DishDetails/SoupDetails.js","components/DishForm/DishDetails/SandwichDetails.js","components/DishForm/DishForm.js","utils/constants/dishTypes.js","App.js","serviceWorker.js","index.js"],"names":["normalizePreparationTime","value","onlyNums","replace","length","slice","renderTextField","label","input","type","meta","touched","invalid","error","inputProps","className","TextField","placeholder","helperText","fullWidth","renderSelectField","children","FormControl","InputLabel","htmlFor","id","Select","native","FormHelperText","PizzaDetails","props","Fragment","Field","name","component","parse","parseInt","parseFloat","SoupDetails","min","max","SandwichDetails","submit","values","axios","post","then","response","console","log","catch","SubmissionError","data","_error","DishForm","handleSubmit","pristine","reset","submitting","dishDetails","dishType","onSubmit","normalize","Typography","variant","gutterBottom","style","marginTop","Button","color","disabled","onClick","reduxForm","form","selector","formValueSelector","connect","state","Notes","href","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","formReducer","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fd42f8e.chunk.js","sourcesContent":["// output: 12:34:56\nconst normalizePreparationTime = value => {\n  if (!value) {\n    return value;\n  }\n\n  const SEPARATOR = \":\";\n  const FIRST_INDEX = 2;\n  const SECOND_INDEX = 4;\n  const THIRD_INDEX = 6;\n\n  const onlyNums = value.replace(/[^\\d]/g, \"\");\n  if (onlyNums.length <= FIRST_INDEX) {\n    return onlyNums;\n  }\n  if (onlyNums.length <= SECOND_INDEX) {\n    return `${onlyNums.slice(0, FIRST_INDEX)}${SEPARATOR}${onlyNums.slice(\n      FIRST_INDEX\n    )}`;\n  }\n  return `${onlyNums.slice(0, FIRST_INDEX)}${SEPARATOR}${onlyNums.slice(\n    FIRST_INDEX,\n    SECOND_INDEX\n  )}${SEPARATOR}${onlyNums.slice(SECOND_INDEX, THIRD_INDEX)}`;\n};\n\nexport default normalizePreparationTime;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst renderTextField = ({\n  label,\n  input,\n  type,\n  meta: { touched, invalid, error },\n  // ...custom // solution based on documentation but does not work beacuse of some \"forEach\" error. \n  inputProps\n}) => {\n \n  return (\n    <div className=\"form__field\">\n      <TextField\n        type={type}\n        label={label}\n        placeholder={label}\n        error={touched && invalid}\n        helperText={touched && error}\n        {...input}\n        inputProps={inputProps}\n        fullWidth={true}\n        // {...custom}\n      />\n    </div>\n  );\n}\n\nexport default renderTextField;\n","import React from \"react\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nconst renderSelectField = ({\n  input,\n  label,\n  meta: { touched, error },\n  children,\n  inputProps\n}) => (\n  <div className=\"form__field\">\n    <FormControl fullWidth error={(touched && error) ? true : false}>\n      <InputLabel htmlFor={inputProps.id}>{label}</InputLabel>\n      <Select native {...input} inputProps={inputProps}>\n        {children}\n      </Select>\n      <FormHelperText>{(touched && error) ? error : null}</FormHelperText>\n    </FormControl>\n  </div>\n);\n\nexport default renderSelectField;\n","import React from \"react\";\nimport { Field } from \"redux-form\";\nimport * as fieldNames from \"../../../utils/constants/fieldNames\";\nimport renderTextField from \"../../../utils/renderTextField\";\n\nconst PizzaDetails = props => {\n  return (\n    <React.Fragment>\n      <Field\n        name={fieldNames.NO_OF_SLICES}\n        type=\"number\"\n        component={renderTextField}\n        label=\"Number of slices\"\n        parse={value => (value === \"\" ? \"\" : parseInt(value, 10))} // because of NaN warning\n      />\n      <Field\n        name={fieldNames.DIAMETER}\n        type=\"number\"\n        component={renderTextField}\n        label=\"Diameter\"\n        parse={value => (value === \"\" ? \"\" : parseFloat(value, 10))}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default PizzaDetails;\n","export const NAME = \"name\";\nexport const PREPARATION_TIME = \"preparation_time\";\nexport const DISH_TYPE = \"type\";\n\n// pizza \nexport const NO_OF_SLICES = \"no_of_slices\";\nexport const DIAMETER = \"diameter\";\n\n// soup\nexport const SPICINESS_SCALE = \"spiciness_scale\";\n\n// sandwich\nexport const SLICES_OF_BREAD = \"slices_of_bread\";\n","import React from \"react\";\nimport { Field } from \"redux-form\";\nimport renderTextField from \"../../../utils/renderTextField\";\nimport * as fieldNames from \"../../../utils/constants/fieldNames\";\n\nconst SoupDetails = props => {\n  return (\n    <React.Fragment>\n      <Field\n        name={fieldNames.SPICINESS_SCALE}\n        type=\"number\"\n        component={renderTextField}\n        label=\"Spiciness scale (1-10)\"\n        parse={value => (value === \"\" ? \"\" : parseInt(value, 10))}\n        inputProps={{ min: 1, max: 10 }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default SoupDetails;\n","import React from 'react';\nimport { Field } from \"redux-form\";\nimport renderTextField from '../../../utils/renderTextField';\nimport * as fieldNames from '../../../utils/constants/fieldNames';\n\nconst SandwichDetails = (props) => {\n  return (\n    <React.Fragment>\n      <Field\n        name={fieldNames.SLICES_OF_BREAD}\n        type=\"number\"\n        component={renderTextField}\n        label=\"Slices of bread\"\n        parse={value => (value === \"\" ? \"\" : parseInt(value, 10))}\n      />\n    </React.Fragment>\n  );\n};\nexport default SandwichDetails\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport axios from \"axios\";\nimport {\n  reduxForm,\n  Field,\n  SubmissionError,\n  formValueSelector\n} from \"redux-form\";\n\nimport * as dishTypes from \"../../utils/constants/dishTypes\";\nimport * as fieldNames from \"../../utils/constants/fieldNames\";\nimport normalizePreparationTime from \"../../utils/normalizePreparationTime\";\n\nimport renderTextField from \"../../utils/renderTextField\";\nimport renderSelectField from \"../../utils/renderSelectField\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Typography from '@material-ui/core/Typography';\n\nimport PizzaDetails from \"./DishDetails/PizzaDetails\";\nimport SoupDetails from \"./DishDetails/SoupDetails\";\nimport SandwichDetails from \"./DishDetails/SandwichDetails\";\n\nconst submit = values => {\n  const URL = \"https://frosty-wood-6558.getsandbox.com:443/dishes\";\n  return axios\n    .post(URL, values)\n    .then(response => {\n      console.log(response);\n    })\n    .catch(error => {\n      throw new SubmissionError({\n        ...error.response.data,\n        _error: \"Please fill out the form correctly\"\n      });\n    });\n};\n\nlet DishForm = props => {\n  const { error, handleSubmit, pristine, reset, submitting, dishType } = props;\n\n  let dishDetails = null;\n\n  switch (dishType) {\n    case dishTypes.PIZZA:\n      dishDetails = <PizzaDetails />;\n      break;\n    case dishTypes.SOUP:\n      dishDetails = <SoupDetails />;\n      break;\n    case dishTypes.SANDWICH:\n      dishDetails = <SandwichDetails />;\n      break;\n    default:\n      dishDetails = null; // default value in redux-form is set to pizza\n  }\n\n  return (\n    <form onSubmit={handleSubmit(submit)}>\n      <Field name={fieldNames.NAME} component={renderTextField} label=\"Name\" />\n\n      <Field\n        name={fieldNames.PREPARATION_TIME}\n        component={renderTextField}\n        label=\"Preparation time\"\n        normalize={normalizePreparationTime}\n      />\n\n      <Field\n        name={fieldNames.DISH_TYPE}\n        component={renderSelectField}\n        label=\"Dish type\"\n        inputProps={{ id: \"dish-type\", name: fieldNames.DISH_TYPE }}\n      >\n      <option></option>\n        <option value={dishTypes.PIZZA}>Pizza</option>\n        <option value={dishTypes.SOUP}>Soup</option>\n        <option value={dishTypes.SANDWICH}>Sandwich</option>\n      </Field>\n\n      {dishDetails}\n\n      {error && (\n        <Typography variant=\"body1\" gutterBottom>\n          {error}\n        </Typography>\n      )}\n\n      <div style={{ marginTop: \"2rem\" }}>\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          disabled={submitting}\n        >\n          Submit\n        </Button>\n\n        <Button\n          variant=\"contained\"\n          disabled={pristine || submitting}\n          onClick={reset}\n        >\n          Clear values\n        </Button>\n      </div>\n    </form>\n  );\n};\n\nconst FORM_NAME = \"dish\";\nDishForm = reduxForm({\n  form: FORM_NAME,\n  // initialValues: {\n    // type: dishTypes.PIZZA\n  // }\n})(DishForm);\n\nconst selector = formValueSelector(FORM_NAME);\nDishForm = connect(state => {\n  const type = selector(state, fieldNames.DISH_TYPE);\n  return {\n    dishType: type\n  };\n})(DishForm);\n\nexport default DishForm;\n","export const PIZZA = \"pizza\";\nexport const SOUP = \"soup\";\nexport const SANDWICH = \"sandwich\";","import React from \"react\";\nimport DishForm from \"./components/DishForm/DishForm\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Notes />\n      <h1>Dish form</h1>\n      <DishForm></DishForm>\n    </div>\n  );\n}\n\nconst Notes = () => {\n  return (\n    <div>\n      <h2>Notes:</h2>\n      <ul>\n        <li>Succesfull submit will be displayed in console.</li>\n        <li>Couldn't figure out yet how to connect MD Slider with redux-form.</li>\n        <li>Preparation time is not very user friendly while editing.</li>\n        <li>There could be redundant data in submitted JSON. </li>\n      </ul>\n      <p>Read more at github: <a href=\"https://github.com/rafkus/react-dishes-form\">source</a></p>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { reducer as formReducer } from \"redux-form\";\n\nconst rootReducer = combineReducers({\n  form: formReducer\n});\n\nconst store = createStore(\n    rootReducer, /* preloadedState, */\n   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n  \nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}